# チャットアプリケーション 要件一覧

## 1. 基本機能

### 1.1 スレッド管理
- スレッドの作成、取得、一覧表示、削除ができること
- スレッドには以下の情報を持たせる
  - **タイトル**: 任意で設定可能
  - **プロバイダー**: デフォルトは `Claude`
  - **システムプロンプト**: 任意で設定可能、オン/オフ切り替え可能

### 1.2 メッセージ管理
- メッセージの送信、取得、一覧表示、削除ができること
- メッセージには以下の情報を持たせる
  - **内容**: テキストやコードブロック、画像などに対応
  - **ロール**: メッセージの送り手（ユーザーかプロバイダーか）
  - **タイムスタンプ**: メッセージの送信時間

### 1.3 データモデル
- **ChatThread** クラス: スレッド情報を管理
- **Message** クラス: メッセージ情報を管理
- **MessageElement** クラス: 各メッセージの具体的な要素（テキスト、コード、画像）を管理

### 1.4 データアクセス
- データベースに対する CR 操作を行うためのデータアクセス層
- `IChatDataManager` インターフェースを通して、スレッドおよびメッセージの操作が可能

## 2. UI 構成

### 2.1 メイン画面
- スレッド一覧を表示するサイドバーと、選択されたスレッドのチャット履歴を表示するメインエリアに分かれる
- メッセージ入力フィールドと送信ボタンを配置

### 2.2 スレッド作成画面
- 新規スレッドの作成フォームを提供
- 入力項目:
  - スレッドタイトル
  - システムプロンプトの内容（任意）
  - システムプロンプトの有効/無効切り替え

### 2.3 開発者向け設定画面
- APIキーやデフォルトのシステムプロンプト設定を管理する画面
- タブで「API設定」「プロンプト設定」を切り替えられる

## 3. サービス層

### 3.1 API通信
- メッセージ送受信に使用する API への通信機能
- 複数のプロバイダーに対応可能（例: `Claude`）
- APIキーの管理

### 3.2 スレッド履歴管理
- `ChatService` クラスを通じて、スレッドとメッセージの履歴を管理し、必要に応じて API に問い合わせ

## 4. その他の機能

### 4.1 コードスニペット対応
- メッセージ内容としてコードスニペットを入力・表示できる機能
- 言語別のハイライトやコピーボタンを設置

### 4.2 画像添付機能
- メッセージ内容として画像を添付・表示できる機能

### 4.3 システムプロンプト制御
- スレッドごとにシステムプロンプトを設定できる
- プロンプトの有効/無効を切り替え可能

## 5. 開発・運用面での考慮事項

### 5.1 エラーハンドリング
- API通信エラー、データベース操作エラー、画像ファイルの読み込みエラーなど、主要なエラーケースを考慮する

### 5.2 セキュリティ
- APIキーの保護、データベースの暗号化などのセキュリティ対策
- センシティブ情報の適切な管理

### 5.3 パフォーマンス最適化
- コレクション表示の仮想化、データベースアクセスの最適化
- メッセージの遅延読み込みやキャッシュの活用
