# チャットアプリケーション 実装状況

## 1. 実装済みのコンポーネント

### 1.1 データモデル
```csharp
public class ChatThread
{
    public string Id { get; set; }
    public string Title { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime LastMessageAt { get; set; }
    public string Provider { get; set; }  // デフォルトClaude
    public string? SystemPrompt { get; set; }  // null許容
    public bool IsSystemPromptEnabled { get; set; }
}

public class Message
{
    public string Id { get; set; }
    public string ThreadId { get; set; }
    public string Role { get; set; }
    public DateTime Timestamp { get; set; }
    public virtual ICollection<MessageElement> MessageElements { get; set; }
}

public class MessageElement
{
    public string Id { get; set; }
    public string MessageId { get; set; }
    public string Type { get; set; }  // Text/Code/Image/Expression
    public string Content { get; set; }
    public string? Language { get; set; }  // コードブロック用、null許容
    public DateTime Timestamp { get; set; }
    public virtual Message Message { get; set; }
}

public class MigrationHistory
{
    public int Id { get; set; }
    public int Version { get; set; }
    public string Name { get; set; }
    public DateTime AppliedAt { get; set; }
    public string Description { get; set; }
    public bool IsSuccess { get; set; }
    public string? ErrorMessage { get; set; }
}
```

### 1.2 データアクセス
```csharp
public class ChatDbContext : DbContext
{
    public DbSet<ChatThread> Threads { get; set; }
    public DbSet<Message> Messages { get; set; }
    public DbSet<MessageElement> MessageElements { get; set; }
    public DbSet<MigrationHistory> MigrationHistory { get; set; }
}

public interface IChatDataManager
{
    Task<string> CreateThreadAsync(string title, string provider = "Claude", string? systemPrompt = null, bool isSystemPromptEnabled = false);
    Task<ChatThread?> GetThreadAsync(string threadId);
    Task<List<ChatThread>> GetAllThreadsAsync();
    Task<string> AddMessageAsync(string threadId, string role, string content);
    Task<List<Message>> GetMessagesAsync(string threadId);
}
```

### 1.3 サービス
```csharp
public interface ILLMApiService  // 旧IClaudeService
{
    Task<string> GetResponseAsync(string message);
    Task InitializeAsync(string apiKey);
    Task<bool> LoadApiKey();
    Task ClearApiKey();
    void ClearHistory();
    bool IsInitialized { get; }
    IReadOnlyList<ChatMessage> ConversationHistory { get; }
}

public class ChatService
{
    // スレッド履歴管理
    private readonly Dictionary<string, List<Message>> _threadMessages = new();
    private ILLMApiService _currentService;

    public async Task LoadThread(string threadId);
    public async Task<string> SendMessage(string threadId, string message);
    public List<Message> GetThreadMessages(string threadId);
}

public class DefaultSystemPrompt
{
    public string Id { get; set; }
    public string Provider { get; set; }  // "Claude" etc
    public string Content { get; set; }   // プロンプトの内容
    public DateTime CreatedAt { get; set; }
    public DateTime? UpdatedAt { get; set; }  // 更新日時
}

// 将来的な編集履歴対応用（優先度低）
public class SystemPromptHistory
{
    public string Id { get; set; }
    public string DefaultSystemPromptId { get; set; }  // 親のID
    public string Content { get; set; }
    public DateTime CreatedAt { get; set; }
}
```